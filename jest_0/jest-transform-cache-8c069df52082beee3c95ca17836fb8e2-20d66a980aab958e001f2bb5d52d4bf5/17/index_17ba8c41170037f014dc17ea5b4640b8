e116f84c63bcafb69dc91f3032a04e0a
/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_2ml1po2mk = function () {var path = '/app/src/chat/index.js',hash = '64e2a8256199a88e37b7d45b21bb8ee09a8664e0',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/app/src/chat/index.js', statementMap: { '0': { start: { line: 1, column: 12 }, end: { line: 1, column: 14 } }, '1': { start: { line: 2, column: 14 }, end: { line: 2, column: 16 } }, '2': { start: { line: 3, column: 9 }, end: { line: 3, column: 13 } }, '3': { start: { line: 6, column: 4 }, end: { line: 6, column: 53 } }, '4': { start: { line: 6, column: 29 }, end: { line: 6, column: 51 } }, '5': { start: { line: 11, column: 8 }, end: { line: 11, column: 22 } }, '6': { start: { line: 13, column: 8 }, end: { line: 13, column: 57 } }, '7': { start: { line: 15, column: 8 }, end: { line: 15, column: 47 } }, '8': { start: { line: 19, column: 8 }, end: { line: 19, column: 34 } }, '9': { start: { line: 21, column: 8 }, end: { line: 21, column: 46 } }, '10': { start: { line: 22, column: 8 }, end: { line: 22, column: 51 } }, '11': { start: { line: 23, column: 8 }, end: { line: 23, column: 45 } }, '12': { start: { line: 27, column: 8 }, end: { line: 27, column: 31 } }, '13': { start: { line: 28, column: 8 }, end: { line: 28, column: 26 } }, '14': { start: { line: 30, column: 8 }, end: { line: 30, column: 28 } }, '15': { start: { line: 32, column: 8 }, end: { line: 49, column: 9 } }, '16': { start: { line: 33, column: 22 }, end: { line: 33, column: 44 } }, '17': { start: { line: 35, column: 12 }, end: { line: 44, column: 13 } }, '18': { start: { line: 36, column: 32 }, end: { line: 36, column: 63 } }, '19': { start: { line: 37, column: 30 }, end: { line: 37, column: 62 } }, '20': { start: { line: 39, column: 16 }, end: { line: 39, column: 39 } }, '21': { start: { line: 40, column: 16 }, end: { line: 40, column: 43 } }, '22': { start: { line: 41, column: 16 }, end: { line: 41, column: 57 } }, '23': { start: { line: 48, column: 12 }, end: { line: 48, column: 45 } }, '24': { start: { line: 53, column: 8 }, end: { line: 53, column: 32 } }, '25': { start: { line: 54, column: 8 }, end: { line: 54, column: 38 } }, '26': { start: { line: 55, column: 8 }, end: { line: 55, column: 44 } }, '27': { start: { line: 56, column: 8 }, end: { line: 56, column: 38 } }, '28': { start: { line: 57, column: 8 }, end: { line: 57, column: 75 } }, '29': { start: { line: 58, column: 8 }, end: { line: 58, column: 38 } }, '30': { start: { line: 59, column: 8 }, end: { line: 59, column: 64 } }, '31': { start: { line: 63, column: 8 }, end: { line: 63, column: 34 } }, '32': { start: { line: 64, column: 8 }, end: { line: 67, column: 11 } }, '33': { start: { line: 65, column: 12 }, end: { line: 65, column: 58 } }, '34': { start: { line: 68, column: 8 }, end: { line: 68, column: 38 } }, '35': { start: { line: 69, column: 8 }, end: { line: 69, column: 75 } }, '36': { start: { line: 70, column: 8 }, end: { line: 70, column: 36 } }, '37': { start: { line: 71, column: 8 }, end: { line: 71, column: 64 } } }, fnMap: { '0': { name: 'generateUsersArray', decl: { start: { line: 5, column: 9 }, end: { line: 5, column: 27 } }, loc: { start: { line: 5, column: 30 }, end: { line: 7, column: 1 } }, line: 5 }, '1': { name: '(anonymous_1)', decl: { start: { line: 6, column: 21 }, end: { line: 6, column: 22 } }, loc: { start: { line: 6, column: 29 }, end: { line: 6, column: 51 } }, line: 6 }, '2': { name: '(anonymous_2)', decl: { start: { line: 10, column: 4 }, end: { line: 10, column: 5 } }, loc: { start: { line: 10, column: 26 }, end: { line: 16, column: 5 } }, line: 10 }, '3': { name: '(anonymous_3)', decl: { start: { line: 18, column: 4 }, end: { line: 18, column: 5 } }, loc: { start: { line: 18, column: 25 }, end: { line: 24, column: 5 } }, line: 18 }, '4': { name: '(anonymous_4)', decl: { start: { line: 26, column: 4 }, end: { line: 26, column: 5 } }, loc: { start: { line: 26, column: 20 }, end: { line: 50, column: 5 } }, line: 26 }, '5': { name: '(anonymous_5)', decl: { start: { line: 52, column: 4 }, end: { line: 52, column: 5 } }, loc: { start: { line: 52, column: 20 }, end: { line: 60, column: 5 } }, line: 52 }, '6': { name: '(anonymous_6)', decl: { start: { line: 62, column: 4 }, end: { line: 62, column: 5 } }, loc: { start: { line: 62, column: 19 }, end: { line: 72, column: 5 } }, line: 62 }, '7': { name: '(anonymous_7)', decl: { start: { line: 64, column: 29 }, end: { line: 64, column: 30 } }, loc: { start: { line: 64, column: 37 }, end: { line: 67, column: 9 } }, line: 64 } }, branchMap: { '0': { loc: { start: { line: 32, column: 8 }, end: { line: 49, column: 9 } }, type: 'if', locations: [{ start: { line: 32, column: 8 }, end: { line: 49, column: 9 } }, { start: { line: 32, column: 8 }, end: { line: 49, column: 9 } }], line: 32 }, '1': { loc: { start: { line: 35, column: 12 }, end: { line: 44, column: 13 } }, type: 'if', locations: [{ start: { line: 35, column: 12 }, end: { line: 44, column: 13 } }, { start: { line: 35, column: 12 }, end: { line: 44, column: 13 } }], line: 35 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0, '35': 0, '36': 0, '37': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0 }, b: { '0': [0, 0], '1': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();let users = /* istanbul ignore next */(cov_2ml1po2mk.s[0]++, []);
let sockets = /* istanbul ignore next */(cov_2ml1po2mk.s[1]++, {});
let io = /* istanbul ignore next */(cov_2ml1po2mk.s[2]++, null);

function generateUsersArray() {/* istanbul ignore next */cov_2ml1po2mk.f[0]++;cov_2ml1po2mk.s[3]++;
    return users.map(user => {/* istanbul ignore next */cov_2ml1po2mk.f[1]++;cov_2ml1po2mk.s[4]++;return Object.values(user)[0];});
}

class Chat {
    constructor(socketio) {/* istanbul ignore next */cov_2ml1po2mk.f[2]++;cov_2ml1po2mk.s[5]++;
        io = socketio; /* istanbul ignore next */cov_2ml1po2mk.s[6]++;

        this.onConnection = this.onConnection.bind(this); /* istanbul ignore next */cov_2ml1po2mk.s[7]++;

        io.on('connection', this.onConnection);
    }

    onConnection(socket) {/* istanbul ignore next */cov_2ml1po2mk.f[3]++;cov_2ml1po2mk.s[8]++;
        console.log('CONNECTION'); /* istanbul ignore next */cov_2ml1po2mk.s[9]++;

        socket.on('new user', this.onNewUser); /* istanbul ignore next */cov_2ml1po2mk.s[10]++;
        socket.on('disconnect', this.onDisconnect); /* istanbul ignore next */cov_2ml1po2mk.s[11]++;
        socket.on('message', this.onMessage);
    }

    onMessage(data) {/* istanbul ignore next */cov_2ml1po2mk.f[4]++;cov_2ml1po2mk.s[12]++;
        console.log('MESSAGE'); /* istanbul ignore next */cov_2ml1po2mk.s[13]++;
        console.log(data); /* istanbul ignore next */cov_2ml1po2mk.s[14]++;

        data.message.trim(); /* istanbul ignore next */cov_2ml1po2mk.s[15]++;

        if (data.message.substr(0, 3) === '/w ') {/* istanbul ignore next */cov_2ml1po2mk.b[0][0]++;
            let msg = /* istanbul ignore next */(cov_2ml1po2mk.s[16]++, data.message.substr(3)); /* istanbul ignore next */cov_2ml1po2mk.s[17]++;

            if (msg.indexOf(' ') !== -1) {/* istanbul ignore next */cov_2ml1po2mk.b[1][0]++;
                let recipient = /* istanbul ignore next */(cov_2ml1po2mk.s[18]++, msg.substr(0, msg.indexOf(' ')));
                let message = /* istanbul ignore next */(cov_2ml1po2mk.s[19]++, msg.substr(msg.indexOf(' ') + 1)); /* istanbul ignore next */cov_2ml1po2mk.s[20]++;

                data.message = message; /* istanbul ignore next */cov_2ml1po2mk.s[21]++;
                console.log('EMITTING PM'); /* istanbul ignore next */cov_2ml1po2mk.s[22]++;
                sockets[recipient].emit('message', data);
            } else {
                // TODO:
                /* istanbul ignore next */cov_2ml1po2mk.b[1][1]++;}
        } else {/* istanbul ignore next */cov_2ml1po2mk.b[0][1]++;cov_2ml1po2mk.s[23]++;
            // Save to db

            io.sockets.emit('message', data);
        }
    }

    onNewUser(user) {/* istanbul ignore next */cov_2ml1po2mk.f[5]++;cov_2ml1po2mk.s[24]++;
        console.log('NEW USER'); /* istanbul ignore next */cov_2ml1po2mk.s[25]++;
        this.username = user.username; /* istanbul ignore next */cov_2ml1po2mk.s[26]++;
        users.push({ [user.username]: user }); /* istanbul ignore next */cov_2ml1po2mk.s[27]++;
        sockets[user.username] = this; /* istanbul ignore next */cov_2ml1po2mk.s[28]++;
        io.sockets.emit('update usernames', generateUsersArray.call(this)); /* istanbul ignore next */cov_2ml1po2mk.s[29]++;
        console.log('Users: ', users); /* istanbul ignore next */cov_2ml1po2mk.s[30]++;
        console.log('Sockets nr:', Object.keys(sockets).length);
    }

    onDisconnect() {/* istanbul ignore next */cov_2ml1po2mk.f[6]++;cov_2ml1po2mk.s[31]++;
        console.log('DISCONNECT'); /* istanbul ignore next */cov_2ml1po2mk.s[32]++;
        users = users.filter(user => {/* istanbul ignore next */cov_2ml1po2mk.f[7]++;cov_2ml1po2mk.s[33]++;
            return Object.keys(user)[0] !== this.username;
            // return Object.keys(user)[0] !== this.id;
        }); /* istanbul ignore next */cov_2ml1po2mk.s[34]++;
        delete sockets[this.username]; /* istanbul ignore next */cov_2ml1po2mk.s[35]++;
        io.sockets.emit('update usernames', generateUsersArray.call(this)); /* istanbul ignore next */cov_2ml1po2mk.s[36]++;
        console.log('Users', users); /* istanbul ignore next */cov_2ml1po2mk.s[37]++;
        console.log('Sockets nr:', Object.keys(sockets).length);
    }} /* istanbul ignore next */exports.default =


Chat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInVzZXJzIiwic29ja2V0cyIsImlvIiwiZ2VuZXJhdGVVc2Vyc0FycmF5IiwibWFwIiwidXNlciIsInZhbHVlcyIsIkNoYXQiLCJjb25zdHJ1Y3RvciIsInNvY2tldGlvIiwib25Db25uZWN0aW9uIiwiYmluZCIsIm9uIiwic29ja2V0IiwiY29uc29sZSIsImxvZyIsIm9uTmV3VXNlciIsIm9uRGlzY29ubmVjdCIsIm9uTWVzc2FnZSIsImRhdGEiLCJtZXNzYWdlIiwidHJpbSIsInN1YnN0ciIsIm1zZyIsImluZGV4T2YiLCJyZWNpcGllbnQiLCJlbWl0IiwidXNlcm5hbWUiLCJwdXNoIiwiY2FsbCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJmaWx0ZXIiXSwibWFwcGluZ3MiOiIyckxBQUEsSUFBSUEseURBQVEsRUFBUixDQUFKO0FBQ0EsSUFBSUMsMkRBQVUsRUFBVixDQUFKO0FBQ0EsSUFBSUMsc0RBQUssSUFBTCxDQUFKOztBQUVBLFNBQVNDLGtCQUFULEdBQThCO0FBQzFCLFdBQU9ILE1BQU1JLEdBQU4sQ0FBVUMsUUFBUSxtRkFBT0MsTUFBUCxDQUFjRCxJQUFkLEVBQW9CLENBQXBCLEVBQXNCLENBQXhDLENBQVA7QUFDSDs7QUFFRCxNQUFNRSxJQUFOLENBQVc7QUFDUEMsZ0JBQVlDLFFBQVosRUFBc0I7QUFDbEJQLGFBQUtPLFFBQUwsQ0FEa0I7O0FBR2xCLGFBQUtDLFlBQUwsR0FBb0IsS0FBS0EsWUFBTCxDQUFrQkMsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBcEIsQ0FIa0I7O0FBS2xCVCxXQUFHVSxFQUFILENBQU0sWUFBTixFQUFvQixLQUFLRixZQUF6QjtBQUNIOztBQUVEQSxpQkFBYUcsTUFBYixFQUFxQjtBQUNqQkMsZ0JBQVFDLEdBQVIsQ0FBWSxZQUFaLEVBRGlCOztBQUdqQkYsZUFBT0QsRUFBUCxDQUFVLFVBQVYsRUFBc0IsS0FBS0ksU0FBM0IsRUFIaUI7QUFJakJILGVBQU9ELEVBQVAsQ0FBVSxZQUFWLEVBQXdCLEtBQUtLLFlBQTdCLEVBSmlCO0FBS2pCSixlQUFPRCxFQUFQLENBQVUsU0FBVixFQUFxQixLQUFLTSxTQUExQjtBQUNIOztBQUVEQSxjQUFVQyxJQUFWLEVBQWdCO0FBQ1pMLGdCQUFRQyxHQUFSLENBQVksU0FBWixFQURZO0FBRVpELGdCQUFRQyxHQUFSLENBQVlJLElBQVosRUFGWTs7QUFJWkEsYUFBS0MsT0FBTCxDQUFhQyxJQUFiLEdBSlk7O0FBTVosWUFBSUYsS0FBS0MsT0FBTCxDQUFhRSxNQUFiLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLE1BQThCLEtBQWxDLEVBQXlDO0FBQ3JDLGdCQUFJQyx3REFBTUosS0FBS0MsT0FBTCxDQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQU4sQ0FBSixDQURxQzs7QUFHckMsZ0JBQUlDLElBQUlDLE9BQUosQ0FBWSxHQUFaLE1BQXFCLENBQUMsQ0FBMUIsRUFBNkI7QUFDekIsb0JBQUlDLDhEQUFZRixJQUFJRCxNQUFKLENBQVcsQ0FBWCxFQUFjQyxJQUFJQyxPQUFKLENBQVksR0FBWixDQUFkLENBQVosQ0FBSjtBQUNBLG9CQUFJSiw0REFBVUcsSUFBSUQsTUFBSixDQUFXQyxJQUFJQyxPQUFKLENBQVksR0FBWixJQUFtQixDQUE5QixDQUFWLENBQUosQ0FGeUI7O0FBSXpCTCxxQkFBS0MsT0FBTCxHQUFlQSxPQUFmLENBSnlCO0FBS3pCTix3QkFBUUMsR0FBUixDQUFZLGFBQVosRUFMeUI7QUFNekJkLHdCQUFRd0IsU0FBUixFQUFtQkMsSUFBbkIsQ0FBd0IsU0FBeEIsRUFBbUNQLElBQW5DO0FBQ0gsYUFQRCxNQU9PO0FBQ0g7QUFERyxrRUFFTjtBQUNKLFNBYkQsTUFhTztBQUNIOztBQUVBakIsZUFBR0QsT0FBSCxDQUFXeUIsSUFBWCxDQUFnQixTQUFoQixFQUEyQlAsSUFBM0I7QUFDSDtBQUNKOztBQUVESCxjQUFVWCxJQUFWLEVBQWdCO0FBQ1pTLGdCQUFRQyxHQUFSLENBQVksVUFBWixFQURZO0FBRVosYUFBS1ksUUFBTCxHQUFnQnRCLEtBQUtzQixRQUFyQixDQUZZO0FBR1ozQixjQUFNNEIsSUFBTixDQUFXLEVBQUMsQ0FBQ3ZCLEtBQUtzQixRQUFOLEdBQWlCdEIsSUFBbEIsRUFBWCxFQUhZO0FBSVpKLGdCQUFRSSxLQUFLc0IsUUFBYixJQUF5QixJQUF6QixDQUpZO0FBS1p6QixXQUFHRCxPQUFILENBQVd5QixJQUFYLENBQWdCLGtCQUFoQixFQUFvQ3ZCLG1CQUFtQjBCLElBQW5CLENBQXdCLElBQXhCLENBQXBDLEVBTFk7QUFNWmYsZ0JBQVFDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCZixLQUF2QixFQU5ZO0FBT1pjLGdCQUFRQyxHQUFSLENBQVksYUFBWixFQUEyQmUsT0FBT0MsSUFBUCxDQUFZOUIsT0FBWixFQUFxQitCLE1BQWhEO0FBQ0g7O0FBRURmLG1CQUFlO0FBQ1hILGdCQUFRQyxHQUFSLENBQVksWUFBWixFQURXO0FBRVhmLGdCQUFRQSxNQUFNaUMsTUFBTixDQUFhNUIsUUFBUTtBQUN6QixtQkFBT3lCLE9BQU9DLElBQVAsQ0FBWTFCLElBQVosRUFBa0IsQ0FBbEIsTUFBeUIsS0FBS3NCLFFBQXJDO0FBQ0E7QUFDSCxTQUhPLENBQVIsQ0FGVztBQU1YLGVBQU8xQixRQUFRLEtBQUswQixRQUFiLENBQVAsQ0FOVztBQU9YekIsV0FBR0QsT0FBSCxDQUFXeUIsSUFBWCxDQUFnQixrQkFBaEIsRUFBb0N2QixtQkFBbUIwQixJQUFuQixDQUF3QixJQUF4QixDQUFwQyxFQVBXO0FBUVhmLGdCQUFRQyxHQUFSLENBQVksT0FBWixFQUFxQmYsS0FBckIsRUFSVztBQVNYYyxnQkFBUUMsR0FBUixDQUFZLGFBQVosRUFBMkJlLE9BQU9DLElBQVAsQ0FBWTlCLE9BQVosRUFBcUIrQixNQUFoRDtBQUNILEtBL0RNLEM7OztBQWtFSXpCLEkiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdXNlcnMgPSBbXTtcbmxldCBzb2NrZXRzID0ge307XG5sZXQgaW8gPSBudWxsO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVVzZXJzQXJyYXkoKSB7XG4gICAgcmV0dXJuIHVzZXJzLm1hcCh1c2VyID0+IE9iamVjdC52YWx1ZXModXNlcilbMF0pO1xufVxuXG5jbGFzcyBDaGF0IHtcbiAgICBjb25zdHJ1Y3Rvcihzb2NrZXRpbykge1xuICAgICAgICBpbyA9IHNvY2tldGlvO1xuXG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uID0gdGhpcy5vbkNvbm5lY3Rpb24uYmluZCh0aGlzKTtcblxuICAgICAgICBpby5vbignY29ubmVjdGlvbicsIHRoaXMub25Db25uZWN0aW9uKTtcbiAgICB9XG5cbiAgICBvbkNvbm5lY3Rpb24oc29ja2V0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDT05ORUNUSU9OJyk7XG5cbiAgICAgICAgc29ja2V0Lm9uKCduZXcgdXNlcicsIHRoaXMub25OZXdVc2VyKTtcbiAgICAgICAgc29ja2V0Lm9uKCdkaXNjb25uZWN0JywgdGhpcy5vbkRpc2Nvbm5lY3QpO1xuICAgICAgICBzb2NrZXQub24oJ21lc3NhZ2UnLCB0aGlzLm9uTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgb25NZXNzYWdlKGRhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ01FU1NBR0UnKTtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICAgICAgZGF0YS5tZXNzYWdlLnRyaW0oKTtcblxuICAgICAgICBpZiAoZGF0YS5tZXNzYWdlLnN1YnN0cigwLCAzKSA9PT0gJy93ICcpIHtcbiAgICAgICAgICAgIGxldCBtc2cgPSBkYXRhLm1lc3NhZ2Uuc3Vic3RyKDMpO1xuXG4gICAgICAgICAgICBpZiAobXNnLmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjaXBpZW50ID0gbXNnLnN1YnN0cigwLCBtc2cuaW5kZXhPZignICcpKTtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IG1zZy5zdWJzdHIobXNnLmluZGV4T2YoJyAnKSArIDEpO1xuXG4gICAgICAgICAgICAgICAgZGF0YS5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRU1JVFRJTkcgUE0nKTtcbiAgICAgICAgICAgICAgICBzb2NrZXRzW3JlY2lwaWVudF0uZW1pdCgnbWVzc2FnZScsIGRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOlxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2F2ZSB0byBkYlxuXG4gICAgICAgICAgICBpby5zb2NrZXRzLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTmV3VXNlcih1c2VyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdORVcgVVNFUicpO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gdXNlci51c2VybmFtZTtcbiAgICAgICAgdXNlcnMucHVzaCh7W3VzZXIudXNlcm5hbWVdOiB1c2VyfSk7XG4gICAgICAgIHNvY2tldHNbdXNlci51c2VybmFtZV0gPSB0aGlzO1xuICAgICAgICBpby5zb2NrZXRzLmVtaXQoJ3VwZGF0ZSB1c2VybmFtZXMnLCBnZW5lcmF0ZVVzZXJzQXJyYXkuY2FsbCh0aGlzKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVc2VyczogJywgdXNlcnMpO1xuICAgICAgICBjb25zb2xlLmxvZygnU29ja2V0cyBucjonLCBPYmplY3Qua2V5cyhzb2NrZXRzKS5sZW5ndGgpO1xuICAgIH1cblxuICAgIG9uRGlzY29ubmVjdCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0RJU0NPTk5FQ1QnKTtcbiAgICAgICAgdXNlcnMgPSB1c2Vycy5maWx0ZXIodXNlciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModXNlcilbMF0gIT09IHRoaXMudXNlcm5hbWU7XG4gICAgICAgICAgICAvLyByZXR1cm4gT2JqZWN0LmtleXModXNlcilbMF0gIT09IHRoaXMuaWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgc29ja2V0c1t0aGlzLnVzZXJuYW1lXTtcbiAgICAgICAgaW8uc29ja2V0cy5lbWl0KCd1cGRhdGUgdXNlcm5hbWVzJywgZ2VuZXJhdGVVc2Vyc0FycmF5LmNhbGwodGhpcykpO1xuICAgICAgICBjb25zb2xlLmxvZygnVXNlcnMnLCB1c2Vycyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTb2NrZXRzIG5yOicsIE9iamVjdC5rZXlzKHNvY2tldHMpLmxlbmd0aCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDaGF0O1xuIl19